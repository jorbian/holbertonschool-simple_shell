OBJECT-ORIENTED DESIGN

It's kind of died down as a buzzword but at least some elements of
Object-Oriented design will show up in any type of modern structured
programming. At it's most basic, it's another layer of organization to
a program over and above functions. With functions we idenitfy things
we need to do over and over and just say "do this function" rather than 
spelling it out again and again or even using the infamous GOTO statement
of yore. 

Objects are just the next layer of organization above functions. It's more
complicated than this, obviously, when you get into higher level concepts
like classes (where we need more than one copy of an object), inheritance
(where we can build classes with sub-classes like how the 'Human' class
is also part of the 'Primate' and 'Animal' classes), and encapsulation
(where there's only certain data objects share with other objects). Vanilla
C doesn't support any of that natively anyway so all we need to worry about 
is how to break our program into parts: What functions will be assoisated 
with what data.

Designing it this way makes the code easier to maintain -- make it easier to
fix problems or add stuff. In principle, too, it makes it easier to split up
the work between different people and different teams. It's possible alot of
times to have different people working on different objects at different times
and bring them together only later. It also becomes possible to completely 
replace an object if you decide you need a different approach to a problem
and do so without (necessarily) effecting the way the program works.

SIMPLE SHELL

We can approach the Simple Shell this way by dividing it into three objects:
the SimpleShell itself, which interprets lines of input, the UserInterface,
which allows someone to use it in interactive mode, and the ScriptReader,
which takes lines of input and feets each line one by one into the core 
SimpleShell. Each object has specific properties we can group together in 
a struct. And each object also has functions closely assosiated with it 
that we can use to modify the object or have it interat with another object.
In true 'object-oriented' languages, these special functions are called 
methods and are a bigger part of the object than they will be for us with
this project. You can, I have found, store function pointers inside of 
structs to have them behave more like object methods in Python or Java
but there really wasn't any particular reason to -- at least not here:

                             SimpleShell
Properties--
 + int exit_status: EXIT_SUCCESS (0) or EXIT_FAILURE (!)
 + int error_status: TRUE (1) OR FALSE (0) -- may or may not trigger immediate exit
 + char **path_variable: path variable inherited from environment as string array
 + char *username: username inherited from environment
 + char *curr_working_dir: working directory (initally inherit from enviornment)
 + char **command_args: arguments parsed from last line of input
Methods--
(TBD)

                            UserInterface

                            